20. Count all numbers with unique digits for a given number of digits. Write its algorithm, program. Find its time and space complexities. Explain with suitable example.
Ans. public class UniqueDigits {

    public static int countNumbersWithUniqueDigits(int n) {
        if (n == 0) return 1;
        if (n > 10) return 0;

        int result = 9;  // First digit can be any number from 1 to 9
        int multiplier = 9;  // Second digit can be anything except the first digit (9 options)

        for (int i = 1; i < n; i++) {
            result *= multiplier;
            multiplier--;  // Decrease the multiplier for each subsequent digit
        }

        return result + countNumbersWithUniqueDigits(n - 1);  // Sum up results for 1 to n digits
    }

    public static void main(String[] args) {
        int n = 2;
        System.out.println("Numbers with unique digits for n = " + n + ": " + countNumbersWithUniqueDigits(n));
    }
}

- Algorithm
If n == 0, return 1.

If n > 10, return 0 (because it's impossible to have more than 10 unique digits).

Initialize a variable result = 9 (for the first digit).

Multiply result by 9, 8, 7, ..., up to (10 - n + 1).

Return result.

-Time and Space Complexity
Type	Complexity
Time	O(n)
Space	O(1)
