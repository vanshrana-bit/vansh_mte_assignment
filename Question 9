9. Find the longest common prefix among a list of strings. Write its algorithm, program. Find its time and space complexities. Explain with suitable example.
Ans. public class LongestCommonPrefix {
    public static String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0) return "";

        String prefix = strs[0];

        for (int i = 1; i < strs.length; i++) {
            while (!strs[i].startsWith(prefix)) {
                prefix = prefix.substring(0, prefix.length() - 1);
                if (prefix.isEmpty()) return "";
            }
        }

        return prefix;
    }

    public static void main(String[] args) {
        String[] words = {"flower", "flow", "flight"};
        System.out.println("Longest Common Prefix: " + longestCommonPrefix(words));
    }
}

  - Algorithm (Horizontal Scanning – Simple & Efficient)
    Assume the first string is the initial prefix.
    
    Compare this prefix with each string in the array:
    
    While the current string doesn't start with the prefix:
    
    Shorten the prefix by removing the last character.
    
    Repeat until a match is found or the prefix becomes empty.
    
    Return the final prefix after the loop.
    
  - Time and Space Complexity:
    Operation	Complexity
    Time	O(S) → where S is the total number of characters in all strings
    Space	O(1) → No extra space used
