17. Calculate how much water can be trapped between the bars of a histogram. Write its algorithm, program. Find its time and space complexities. Explain with suitable example.
Ans. public class TrappingRainWater {

    public static int trap(int[] height) {
        int left = 0, right = height.length - 1;
        int leftMax = 0, rightMax = 0;
        int water = 0;

        while (left < right) {
            if (height[left] < height[right]) {
                if (height[left] >= leftMax) {
                    leftMax = height[left];
                } else {
                    water += leftMax - height[left];
                }
                left++;
            } else {
                if (height[right] >= rightMax) {
                    rightMax = height[right];
                } else {
                    water += rightMax - height[right];
                }
                right--;
            }
        }

        return water;
    }

    public static void main(String[] args) {
        int[] height = {0,1,0,2,1,0,1,3,2,1,2,1};
        int result = trap(height);
        System.out.println("Total water trapped: " + result);
    }
}

-Algorithm (Two-Pointer Approach â€“ Optimal)
Initialize two pointers: left = 0, right = n - 1

Maintain two variables: leftMax = 0, rightMax = 0

While left < right:

If height[left] < height[right]:

If height[left] >= leftMax: update leftMax

Else, water trapped = leftMax - height[left]

Move left++

Else:

If height[right] >= rightMax: update rightMax

Else, water trapped = rightMax - height[right]

Move right--

Sum all trapped water

-Time and Space Complexity
Type	Complexity
Time	O(n)
Space	O(1)
