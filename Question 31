Use a deque to find the maximum in every sliding window of size K. Write its algorithm, program. Find its time and space complexities. Explain with suitable example.
Ans. import java.util.*;

public class SlidingWindowMax {
    public static int[] maxSlidingWindow(int[] nums, int k) {
        if (nums == null || k <= 0) return new int[0];

        int n = nums.length;
        int[] result = new int[n - k + 1];
        Deque<Integer> dq = new ArrayDeque<>(); // stores indices

        for (int i = 0; i < n; i++) {
            // Remove out of window indices
            if (!dq.isEmpty() && dq.peekFirst() <= i - k) {
                dq.pollFirst();
            }

            // Remove smaller values as they won't be needed
            while (!dq.isEmpty() && nums[i] >= nums[dq.peekLast()]) {
                dq.pollLast();
            }

            dq.offerLast(i); // Add current index

            // If window has reached size k, add max (front of deque) to result
            if (i >= k - 1) {
                result[i - k + 1] = nums[dq.peekFirst()];
            }
        }

        return result;
    }

    public static void main(String[] args) {
        int[] nums = {1, 3, -1, -3, 5, 3, 6, 7};
        int k = 3;
        int[] result = maxSlidingWindow(nums, k);
        System.out.println(Arrays.toString(result)); // [3, 3, 5, 5, 6, 7]
    }
}

ðŸ”§ Algorithm (Using Deque)
Create a deque dq that stores indices of useful elements.

For each index i in array:

Remove indices from front of deque if they are out of the window.

Remove indices from back while nums[i] >= nums[dq.getLast()] (as they can't be max anymore).

Add index i to deque.

If i >= k - 1, the front of deque is the maximum for that window.

ðŸ“Š Time and Space Complexity
Time Complexity: O(n)
Each element is pushed and popped at most once from the deque.

Space Complexity: O(k)
The deque stores at most k elements (indices).
