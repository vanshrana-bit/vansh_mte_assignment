35. Find the k-most frequent elements in an array using a priority queue. Write its algorithm, program. Find its time and space complexities. Explain with suitable example.
Ans. import java.util.*;

public class KMostFrequent {
    public static int[] topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> freqMap = new HashMap<>();

        // Step 1: Count frequency of each element
        for (int num : nums) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
        }

        // Step 2: Use a min-heap (priority queue)
        PriorityQueue<Map.Entry<Integer, Integer>> minHeap =
            new PriorityQueue<>(Comparator.comparingInt(Map.Entry::getValue));

        // Step 3: Maintain heap of size k
        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {
            minHeap.offer(entry);
            if (minHeap.size() > k) {
                minHeap.poll(); // remove least frequent
            }
        }

        // Step 4: Build result array
        int[] result = new int[k];
        int i = 0;
        while (!minHeap.isEmpty()) {
            result[i++] = minHeap.poll().getKey();
        }

        return result;
    }

    public static void main(String[] args) {
        int[] nums = {1,1,1,2,2,3};
        int k = 2;
        System.out.println("Top " + k + " frequent elements: " + Arrays.toString(topKFrequent(nums, k)));
        // Output: [1, 2]
    }
}


ðŸ”§ Algorithm:
Count frequencies using a HashMap<Integer, Integer>.

Create a PriorityQueue (min-heap) with comparator based on frequency.

Add entries to the heap.

  -If heap.size() > k, remove the least frequent.

Extract elements from the heap into result array.

ðŸ“Š Time and Space Complexity
Operation	                Complexity
Frequency counting (Map)	O(n)
Heap operations (log k)	  O(n log k)
Final result array	      O(k)
Total Time	              O(n log k)
Space Complexity	        O(n)
