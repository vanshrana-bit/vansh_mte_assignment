19. How to find the maximum product subarray. Write its algorithm, program. Find its time and space complexities. Explain with suitable example
Ans. public class MaxProductSubarray {

    public static int maxProduct(int[] nums) {
        int maxSoFar = nums[0];
        int maxEndingHere = nums[0];
        int minEndingHere = nums[0];

        for (int i = 1; i < nums.length; i++) {
            int curr = nums[i];

            if (curr < 0) {
                // swap max and min
                int temp = maxEndingHere;
                maxEndingHere = minEndingHere;
                minEndingHere = temp;
            }

            maxEndingHere = Math.max(curr, maxEndingHere * curr);
            minEndingHere = Math.min(curr, minEndingHere * curr);

            maxSoFar = Math.max(maxSoFar, maxEndingHere);
        }

        return maxSoFar;
    }

    public static void main(String[] args) {
        int[] nums = {2, 3, -2, 4};
        System.out.println("Maximum Product Subarray: " + maxProduct(nums));
    }
}

- Algorithm (Kadaneâ€™s for Product Variant)
maxSoFar: the overall max product

maxEndingHere: max product ending at current index

minEndingHere: min product ending here (important for negative numbers)

ðŸ”§ Steps:
Initialize:

maxSoFar = nums[0]

maxEndingHere = nums[0]

minEndingHere = nums[0]

Iterate through the array starting from index 1

If nums[i] is negative â†’ swap maxEndingHere and minEndingHere

Update:

maxEndingHere = max(nums[i], maxEndingHere * nums[i])

minEndingHere = min(nums[i], minEndingHere * nums[i])

Update maxSoFar = max(maxSoFar, maxEndingHere)

Return maxSoFar

-Time and Space Complexity
Type	Complexity
Time	O(n)
Space	O(1)
