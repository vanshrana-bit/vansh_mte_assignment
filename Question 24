24. Explain the concept of bit manipulation and its advantages in algorithm design
Ans - Bit Manipulation: Concept and Explanation
      Bit manipulation refers to the process of directly manipulating bits or binary digits (0s and 1s) of numbers using bitwise operators.
      These operations work at the individual bit level and allow for highly efficient algorithms, especially in low-level programming and systems design.

- Bitwise Operators in Programming
  Bitwise operators perform operations on individual bits of a number. The common bitwise operators are:
  
  AND (&): Returns a bit set to 1 if both bits are 1.
  
  Example: 5 & 3 (binary 0101 & 0011) gives 1 (binary 0001).
  
  OR (|): Returns a bit set to 1 if at least one of the bits is 1.
  
  Example: 5 | 3 (binary 0101 | 0011) gives 7 (binary 0111).
  
  XOR (^): Returns a bit set to 1 if the bits are different (1 if one bit is 1 and the other is 0).
  
  Example: 5 ^ 3 (binary 0101 ^ 0011) gives 6 (binary 0110).
  
  NOT (~): Inverts the bits (turns 1s to 0s and 0s to 1s).
  
  Example: ~5 (binary 0101) gives -6 (binary 1010 in two's complement).
  
  Left Shift (<<): Shifts the bits to the left, filling with 0s.
  
  Example: 5 << 1 (binary 0101 << 1) gives 10 (binary 1010).
  
  Right Shift (>>): Shifts the bits to the right, preserving the sign bit (for signed integers).
  
  Example: 5 >> 1 (binary 0101 >> 1) gives 2 (binary 0010).

- Advantages of Bit Manipulation in Algorithm Design
Efficiency:

Faster Computations: Bitwise operations are extremely fast because they are directly supported by the CPU at the hardware level. They typically execute in a single CPU cycle, making them faster than arithmetic or logical operations.
Low-Level Control: Bit manipulation gives programmers precise control over the individual bits, which can be critical in performance-sensitive applications, such as embedded systems or cryptography.

Memory Efficiency:

Compact Representation: Bit manipulation allows storing multiple Boolean flags or small integer values in a single integer or long variable. This is especially useful when dealing with large datasets.
Memory Constraints: In memory-constrained environments (like embedded systems), using bitwise operations allows packing more data into a smaller space.
