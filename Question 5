5. Find the maximum sum of any subarray of size K in a given array. Write its algorithm, program. Find its time and space complexities. Explain with suitable example ?
Ans. public class MaxSubarraySumK {
    public static int maxSumK(int[] arr, int k) {
        int n = arr.length;
        if (n < k) {
            System.out.println("Invalid: k is greater than array size.");
            return -1;
        }

        int windowSum = 0;
        for (int i = 0; i < k; i++) {
            windowSum += arr[i];
        }

        int maxSum = windowSum;

        for (int i = k; i < n; i++) {
            windowSum += arr[i] - arr[i - k];
            maxSum = Math.max(maxSum, windowSum);
        }

        return maxSum;
    }

    public static void main(String[] args) {
        int[] arr = {2, 1, 5, 1, 3, 2};
        int k = 3;
        System.out.println("Maximum sum of subarray of size " + k + " is: " + maxSumK(arr, k));
    }
}
-- Algorithm (Sliding Window â€“ O(n) Time):
Calculate the sum of the first window of size k.

Initialize maxSum with this sum.

Slide the window:

For each index i from k to n-1:

Subtract the element going out of the window: arr[i - k]

Add the new element coming in: arr[i]

Update maxSum if the new sum is greater.

Return maxSum.

-Time & Space Complexity:
Operation	Complexity
Time	O(n)
Space	O(1)
