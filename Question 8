8. Find the longest palindromic substring in a given string. Write its algorithm, program. Find its time and space complexities. Explain with suitable example
Ans.public class LongestPalindrome {
    public static String longestPalindrome(String s) {
        if (s == null || s.length() < 1) return "";

        int start = 0, maxLen = 0;

        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i);       // Odd length
            int len2 = expandAroundCenter(s, i, i + 1);   // Even length
            int len = Math.max(len1, len2);

            if (len > maxLen) {
                maxLen = len;
                start = i - (len - 1) / 2;
            }
        }

        return s.substring(start, start + maxLen);
    }

    private static int expandAroundCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1; // length of the palindrome
    }

    public static void main(String[] args) {
        String s = "babad";
        System.out.println("Longest Palindromic Substring: " + longestPalindrome(s));
    }
}

  - Algorithm:
    Initialize start = 0, maxLen = 0
    
    For each character in the string:
    
    Expand around it for odd-length palindrome (single center)
    
    Expand around it and the next character for even-length palindrome (double center)
    
    Update start and maxLen if a longer palindrome is found
    
    Return the substring from start to start + maxLen

   - Time and Space Complexity:
      Operation	Complexity
      Time	O(nÂ²)
      Space	O(1)
