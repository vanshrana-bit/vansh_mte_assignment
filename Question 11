11.Find two numbers in a sorted array that add up to a target. Write its algorithm, program. Find its time and space complexities. Explain with suitable example.
Ans.public class TwoSumSortedArray {

    public static int[] findPairWithSum(int[] arr, int target) {
        int left = 0;
        int right = arr.length - 1;

        while (left < right) {
            int currentSum = arr[left] + arr[right];
            
            if (currentSum == target) {
                return new int[] {arr[left], arr[right]};
            } else if (currentSum < target) {
                left++;
            } else {
                right--;
            }
        }

        return null; // No pair found
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 6, 8, 11};
        int target = 10;

        int[] result = findPairWithSum(arr, target);

        if (result != null) {
            System.out.println("Pair found: (" + result[0] + ", " + result[1] + ")");
        } else {
            System.out.println("No pair found.");
        }
    }
}
-Algorithm: Two Pointer Approach
Since the array is sorted, we can use two pointers:

Initialize two pointers:
left = 0 and right = length of array - 1

Loop until left < right:

Calculate the sum: current_sum = arr[left] + arr[right]

If current_sum == target: return the pair

If current_sum < target: move left forward (left++)

If current_sum > target: move right backward (right--)

If no such pair exists, return "No pair found"

- Time and Space Complexity
Complexity	Value
Time	      O(n) – at most each pointer moves n times
Space	      O(1) – no extra space used
