14. Find the median of two sorted arrays using binary search. Write its algorithm, program.Find its time and space complexities. Explain with suitable example.

Ans. public class MedianOfTwoSortedArrays {

    public static double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // Ensure nums1 is the smaller array
        if (nums1.length > nums2.length)
            return findMedianSortedArrays(nums2, nums1);

        int n = nums1.length;
        int m = nums2.length;
        int low = 0, high = n;

        while (low <= high) {
            int i = (low + high) / 2;
            int j = (n + m + 1) / 2 - i;

            int maxLeft1 = (i == 0) ? Integer.MIN_VALUE : nums1[i - 1];
            int minRight1 = (i == n) ? Integer.MAX_VALUE : nums1[i];

            int maxLeft2 = (j == 0) ? Integer.MIN_VALUE : nums2[j - 1];
            int minRight2 = (j == m) ? Integer.MAX_VALUE : nums2[j];

            if (maxLeft1 <= minRight2 && maxLeft2 <= minRight1) {
                if ((n + m) % 2 == 0) {
                    return (Math.max(maxLeft1, maxLeft2) + Math.min(minRight1, minRight2)) / 2.0;
                } else {
                    return Math.max(maxLeft1, maxLeft2);
                }
            } else if (maxLeft1 > minRight2) {
                high = i - 1;
            } else {
                low = i + 1;
            }
        }

        throw new IllegalArgumentException("Input arrays are not sorted properly");
    }

    public static void main(String[] args) {
        int[] nums1 = {1, 3};
        int[] nums2 = {2};

        double median = findMedianSortedArrays(nums1, nums2);
        System.out.println("Median: " + median);
    }
}

-Algorithm:

nums1 has length n, nums2 has length m, and n <= m

Apply binary search on nums1, using two pointers low = 0, high = n.

Partition nums1 at index i, and nums2 at index j = (n + m + 1) / 2 - i.

Find:

maxLeft1 = nums1[i - 1] if i > 0, else -∞

minRight1 = nums1[i] if i < n, else +∞

Same for nums2: maxLeft2, minRight2

If maxLeft1 <= minRight2 and maxLeft2 <= minRight1:

If total length is even, median = average of max(maxLeft1, maxLeft2) and min(minRight1, minRight2)

If odd, median = max(maxLeft1, maxLeft2)

If maxLeft1 > minRight2, move high = i - 1

Else, move low = i + 1

-Time and Space Complexity
Type	Complexity
Time	O(log(min(n, m)))
Space	O(1) (No extra space)
