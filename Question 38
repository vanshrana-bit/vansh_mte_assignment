38. Generate all permutations of a given array. Write its algorithm, program. Find its time and space complexities. Explain with suitable example.
Ans. import java.util.*;

public class Permutations {
    public static List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(nums, 0, result);
        return result;
    }

    private static void backtrack(int[] nums, int start, List<List<Integer>> result) {
        if (start == nums.length) {
            List<Integer> permutation = new ArrayList<>();
            for (int num : nums) permutation.add(num);
            result.add(permutation);
            return;
        }

        for (int i = start; i < nums.length; i++) {
            swap(nums, start, i); // choose
            backtrack(nums, start + 1, result); // explore
            swap(nums, start, i); // un-choose (backtrack)
        }
    }

    private static void swap(int[] nums, int i, int j) {
        int temp = nums[i]; nums[i] = nums[j]; nums[j] = temp;
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 3};
        List<List<Integer>> permutations = permute(nums);
        System.out.println("All permutations:");
        for (List<Integer> p : permutations) {
            System.out.println(p);
        }
    }
}

ðŸ”§ Algorithm (In-place Swap Method)
At every recursive call, fix one element at current index.

Swap it with each element from current index to end.

Recurse to fix the next index.

Backtrack (swap back).

ðŸ“Š Time and Space Complexity
Metric	Value
Time	  O(n!) (Total permutations)
Space	  O(n) recursion depth + O(n!) for result
